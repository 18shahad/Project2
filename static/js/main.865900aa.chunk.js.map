{"version":3,"sources":["components/feels.png","components/singleItem.js","components/Items.js","components/Feeling.js","components/Quotes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","singleItem","edit","onClick","props","editFunc","index","fav","remove","className","favFunc","delFunc","newID","this","id","type","name","value","newFeel","React","Component","Items","allFeeling","show","feelingList","map","feel","checkedList","key","favList","Feeling","addFeeling","setState","feeling","state","newItem","onTextBoxChange","e","target","console","log","editText","prompt","newFeeling","splice","push","checked","placeholder","onChange","showAll","showFav","clear","Quotes","quoteList","quoteText","quoteAuthor","getQuote","axios","method","url","then","res","data","catch","err","src","require","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.865900aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/feels.206404e1.png\";","import React from 'react';\nexport default class singleItem extends React.Component {\n  render() {\n\n    //ICONS\n    let edit = <button onClick={()=> this.props.editFunc(this.props.index, edit, fav, remove)} className='btn'><span className=\"glyphicon glyphicon-edit\"></span></button>;\n    let fav = <button onClick={() => this.props.favFunc(this.props.index)} className='btn'><span className=\"glyphicon glyphicon-heart\"></span></button>;\n    let remove = <button onClick={() => this.props.delFunc(this.props.index)} className='btn'><span className=\"glyphicon glyphicon-remove\"></span></button>;\n    \n    let newID = this.props.index + 's';\n    return (\n      <div id={this.props.index}>\n        <p><input type=\"checkbox\" id={this.props.index} name=\"feeling\" value=\"feel\" />\n                <strong id={newID}>{this.props.newFeel}</strong></p> \n        {fav}  {edit}   {remove} \n        <hr/>\n     </div>\n    );\n  }\n}","import React from 'react';\nimport SingleItem from './singleItem'\n\n\nexport default class Items extends React.Component {\n    \n\n    \n  render() {\n\n    let allFeeling = [];\n    if (this.props.show === 'all')\n    {\n     allFeeling = this.props.feelingList.map((feel, index)=>{\n        return <SingleItem checkedList={this.props.checkedList} newFeel={feel} index={index} key={index} editFunc={this.props.editFunc} delFunc={this.props.delFunc} favFunc={this.props.favFunc}/>;\n\n      });\n    }\n\n    else if (this.props.show === 'fav')\n    {\n\n       allFeeling = this.props.favList.map((feel, index)=>{\n        return <SingleItem checkedList={this.props.checkedList} newFeel={feel} index={index} key={index} editFunc={this.props.editFunc} delFunc={this.props.delFunc} favFunc={this.props.favFunc}/>;\n      });\n    }\n    return (\n        <div>\n            {allFeeling}\n\n        </div>\n    );\n  }\n}\n\n\n\n\n\n","import React from 'react';\nimport Items from './Items';\n\nexport default class Feeling extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          feeling: [],\n          newItem: '',\n          fav: [],\n          checkedList: [],\n          show: 'all',\n          checked: false\n                };\n    \n      }\n\n  \n  addFeeling = () => {\n\n    this.setState({\n        feeling: [...this.state.feeling, this.state.newItem],\n        newItem: ''\n      });\n\n  }\n\n    onTextBoxChange = (e) => {\n    this.setState({\n      newItem: e.target.value\n    });\n  }\n\n  clear() {\n    this.setState({\n        feeling: []\n      })\n  }\n\n  showAll() {\n    this.setState({\n        show: 'all'\n      })\n  }\n\n  showFav() {\n    this.setState({\n        show: 'fav'\n      })\n  }\n\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  editFunc = (index) => {\n    console.log('IN EDIT', index)\n    console.log(this.state.feeling[index])  \n\n    var editText = prompt(\"TO EDIT YOUR TEXT: \", this.state.feeling[index]);\n    let newID = index + 's';\n    if (editText != null) {\n        this.state.feeling[index] = editText;\n        let newFeeling = this.state.feeling;\n        this.setState({\n            feeling: newFeeling\n          })\n    }\n\n    }\n\n    delFunc = (index) => {\n        console.log('IN DELETE', index)\n        console.log(this.state.feeling[index])  \n        this.state.feeling.splice(index,1);\n        let newFeeling = this.state.feeling;\n        this.setState({\n            feeling: newFeeling\n          })\n    }\n\n    favFunc = (index) => {\n        console.log('IN FAV', index)\n        this.state.fav.push(this.state.feeling[index])\n        console.log('fav array is: ', this.state.fav)\n\n    }\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n  render() {\n\n    return (\n        <div id='left'>\n        \n        <p id='par'>Writing about your feelings can help you to feel better mentally and physically.</p>\n        <textarea id='inputText' placeholder=\"Write your feeling!!\" name=\"feeling\" value={this.state.newItem} onChange={this.onTextBoxChange}/>\n\n        <button onClick={()=>this.addFeeling()}> Add </button>\n        <div className='scrollable' id='list'>\n        <button onClick={()=>this.showAll()} id='show'> Show All </button>\n        <button onClick={()=>this.showFav()} id='fav'> Favorite </button>\n        <Items feelingList={this.state.feeling} favList={this.state.fav} show={this.state.show} checkedList={this.state.checkedList} editFunc={this.editFunc} delFunc={this.delFunc} favFunc={this.favFunc}/>\n\n        </div> \n        <button onClick={()=>this.clear()}> Clear All! </button>\n\n\n        </div>\n    );\n  }\n}\n\n\n\n","import React from 'react';\nimport axios from 'axios';\n\nexport default class Quotes extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          quoteList: [],\n          quoteText: '',\n          quoteAuthor: ''\n                };\n    \n      }\n\n    componentDidMount(){\n        {this.getQuote()}\n      \n      }\n        \n      getQuote(){\n        let url3 ='https://cors-anywhere.herokuapp.com/http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en';\n       \n        axios({ method: 'get', url:url3 })\n        .then(res => {\n          console.log(res);\n          this.setState({\n            quoteAuthor: res.data.quoteAuthor,\n            quoteText: res.data.quoteText\n          });            \n      \n        })\n        .catch(err => {\n          console.log(err);\n        });\n      }\n\n\n  render() {\n\n\n    return (\n        <div id='right'>\n        <h3><strong>Today's Quote!</strong></h3>\n        {/* <button onClick={() => this.getQuote()}> More Quotes </button> */}\n\n      <div className='scrollable' id='qContainer'> \n\n            <strong>{this.state.quoteText}</strong>\n            <p>\" {this.state.quoteAuthor} \"</p>\n      </div>\n        <img src={require('../components/feels.png')} alt='feeling'/>\n\n\n    </div>\n    );\n  }\n}\n\n\n\n\n\n\n\n\n\n       ","import React from 'react';\nimport Feeling from './components/Feeling';\nimport Quotes from './components/Quotes';\nimport './App.css';\n\n\nexport default class App extends React.Component {\n\nrender() {\n  return (\n    <div id='container'>\n      <h1><strong>HOW DO YOU FEEL TODAY !!!</strong></h1>\n             {/* <!-- LEFT SECTION !!!!! --> */}\n             <div id='content'>\n\n             <Feeling />\n    \n            {/* <!-- RIGHT SECTION !!!!! --> */}\n            <Quotes />\n        </div>\n    </div>\n  )\n}\n\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}